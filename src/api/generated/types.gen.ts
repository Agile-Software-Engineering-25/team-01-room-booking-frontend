// This file is auto-generated by @hey-api/openapi-ts

export type GetAllBuildingsResponse = {
  buildings: Array<Building>;
};

export type Building = {
  /**
   * Unique identifier for a building
   */
  id: string;
  /**
   * Name of the building
   */
  name: string;
  /**
   * Street address of the building
   */
  address: string;
  /**
   * Description of the building
   */
  description?: string;
  state: BuildingState;
};

export type BuildingCreateRequest = {
  /**
   * Name of the building
   */
  name: string;
  /**
   * Street address of the building
   */
  address: string;
  /**
   * Description of the building
   */
  description?: string;
  state: BuildingState;
};

export type Room = {
  id: string;
  name: string;
  /**
   * The building this room belongs to
   */
  buildingId: string;
  characteristics: Array<Characteristic>;
};

export type RoomCreateRequest = {
  name: string;
  buildingId: string;
  characteristics: Array<Characteristic>;
};

export type Characteristic = {
  type: string;
  value: {
    [key: string]: unknown;
  };
};

export type SearchCharacteristic = Characteristic & {
  operator:
    | 'EQUALS'
    | 'NOT_EQUALS'
    | 'GREATER_THAN'
    | 'GREATER_THAN_OR_EQUAL'
    | 'LESS_THAN'
    | 'LESS_THAN_OR_EQUAL';
};

export type RoomInquiry = {
  startTime: string;
  endTime: string;
  groupId: string;
  characteristics: Array<SearchCharacteristic>;
};

export type RoomBookingRequest = {
  roomId: string;
  lecturerIds: Array<string>;
  studentGroupIds: Array<string>;
  groupSize?: number;
  startTime: string;
  endTime: string;
};

export type GetAllRoomsResponse = {
  rooms: Array<Room>;
};

export type GetAllBookingsResponse = {
  bookings: Array<Booking>;
};

/**
 * Describes the operational state of a building.
 */
export type BuildingState = 'open' | 'closed';

export type Booking = {
  id: string;
  roomId: string;
  lecturerIds: Array<string>;
  studentGroupIds: Array<string>;
  startTime: string;
  endTime: string;
};

export type GetBuildingsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/buildings';
};

export type GetBuildingsResponses = {
  /**
   * List of all buildings
   */
  200: GetAllBuildingsResponse;
};

export type GetBuildingsResponse =
  GetBuildingsResponses[keyof GetBuildingsResponses];

export type CreateBuildingData = {
  body: BuildingCreateRequest;
  path?: never;
  query?: never;
  url: '/buildings';
};

export type CreateBuildingErrors = {
  /**
   * The building could not be created.
   */
  400: unknown;
};

export type CreateBuildingResponses = {
  /**
   * Building created successfully
   */
  201: Building;
};

export type CreateBuildingResponse =
  CreateBuildingResponses[keyof CreateBuildingResponses];

export type DeleteBuildingData = {
  body?: never;
  path: {
    /**
     * UUID of the building
     */
    buildingId: string;
  };
  query?: never;
  url: '/buildings/{buildingId}';
};

export type DeleteBuildingErrors = {
  /**
   * Cannot delete building with existing rooms or bookings.
   */
  400: unknown;
  /**
   * Not found
   */
  404: unknown;
};

export type DeleteBuildingResponses = {
  /**
   * Building deleted
   */
  204: void;
};

export type DeleteBuildingResponse =
  DeleteBuildingResponses[keyof DeleteBuildingResponses];

export type GetBuildingByIdData = {
  body?: never;
  path: {
    /**
     * UUID of the building
     */
    buildingId: string;
  };
  query?: never;
  url: '/buildings/{buildingId}';
};

export type GetBuildingByIdErrors = {
  /**
   * There is no building with the specified ID.
   */
  404: unknown;
};

export type GetBuildingByIdResponses = {
  /**
   * The building with the specified ID
   */
  200: Building;
};

export type GetBuildingByIdResponse =
  GetBuildingByIdResponses[keyof GetBuildingByIdResponses];

export type UpdateBuildingData = {
  body: BuildingCreateRequest;
  path: {
    /**
     * UUID of the building
     */
    buildingId: string;
  };
  query?: never;
  url: '/buildings/{buildingId}';
};

export type UpdateBuildingErrors = {
  /**
   * There is no building with the specified ID.
   */
  404: unknown;
};

export type UpdateBuildingResponses = {
  /**
   * The building with the specified ID was updated successfully.
   */
  200: Building;
};

export type UpdateBuildingResponse =
  UpdateBuildingResponses[keyof UpdateBuildingResponses];

export type GetRoomsForBuildingData = {
  body?: never;
  path: {
    /**
     * UUID of the building
     */
    buildingId: string;
  };
  query?: never;
  url: '/buildings/{buildingId}/rooms';
};

export type GetRoomsForBuildingErrors = {
  /**
   * Building not found
   */
  404: unknown;
};

export type GetRoomsForBuildingResponses = {
  /**
   * List of rooms
   */
  200: Array<Room>;
};

export type GetRoomsForBuildingResponse =
  GetRoomsForBuildingResponses[keyof GetRoomsForBuildingResponses];

export type GetBookingsForBuildingData = {
  body?: never;
  path: {
    /**
     * UUID of the building
     */
    buildingId: string;
  };
  query: {
    /**
     * Date for which bookings are requested in ISO 8601 format (YYYY-MM-DD)
     */
    date: string;
  };
  url: '/buildings/{buildingId}/bookings';
};

export type GetBookingsForBuildingErrors = {
  /**
   * Invalid date format or past date.
   */
  400: unknown;
  /**
   * Building not found.
   */
  404: unknown;
};

export type GetBookingsForBuildingResponses = {
  /**
   * List of bookings for the specified building on the specified date.
   */
  200: GetAllBookingsResponse;
};

export type GetBookingsForBuildingResponse =
  GetBookingsForBuildingResponses[keyof GetBookingsForBuildingResponses];

export type GetRoomsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/rooms';
};

export type GetRoomsResponses = {
  /**
   * Success. Returns a list of all known rooms.
   */
  200: GetAllRoomsResponse;
};

export type GetRoomsResponse = GetRoomsResponses[keyof GetRoomsResponses];

export type CreateRoomData = {
  body: RoomCreateRequest;
  path?: never;
  query?: never;
  url: '/rooms';
};

export type CreateRoomErrors = {
  /**
   * Room creation failed.
   */
  400: unknown;
};

export type CreateRoomResponses = {
  /**
   * Room created successfully.
   */
  201: Room;
};

export type CreateRoomResponse = CreateRoomResponses[keyof CreateRoomResponses];

export type FindAvailableRoomsData = {
  body: RoomInquiry;
  path?: never;
  query?: never;
  url: '/rooms/inquiry';
};

export type FindAvailableRoomsErrors = {
  /**
   * Invalid request parameters.
   */
  400: unknown;
};

export type FindAvailableRoomsResponses = {
  /**
   * Success. Returns a list of rooms that are available for the specified booking.
   */
  200: Array<Room>;
};

export type FindAvailableRoomsResponse =
  FindAvailableRoomsResponses[keyof FindAvailableRoomsResponses];

export type DeleteRoomByIdData = {
  body?: never;
  path: {
    /**
     * The unique identifier of the room (UUID v7).
     */
    roomId: string;
  };
  query?: never;
  url: '/rooms/{roomId}';
};

export type DeleteRoomByIdErrors = {
  /**
   * The room has bookings assigned and cannot be deleted.
   */
  400: unknown;
  /**
   * Room not found.
   */
  404: unknown;
};

export type DeleteRoomByIdResponses = {
  /**
   * Room deleted successfully.
   */
  204: void;
};

export type DeleteRoomByIdResponse =
  DeleteRoomByIdResponses[keyof DeleteRoomByIdResponses];

export type GetRoomByIdData = {
  body?: never;
  path: {
    /**
     * The unique identifier of the room (UUID v7).
     */
    roomId: string;
  };
  query?: never;
  url: '/rooms/{roomId}';
};

export type GetRoomByIdErrors = {
  /**
   * Room not found.
   */
  404: unknown;
};

export type GetRoomByIdResponses = {
  /**
   * Success. Returns the details of the specified room.
   */
  200: Room;
};

export type GetRoomByIdResponse =
  GetRoomByIdResponses[keyof GetRoomByIdResponses];

export type UpdateRoomByIdData = {
  body: RoomCreateRequest;
  path: {
    /**
     * The unique identifier of the room (UUID v7).
     */
    roomId: string;
  };
  query?: never;
  url: '/rooms/{roomId}';
};

export type UpdateRoomByIdErrors = {
  /**
   * Room update failed XYZ.
   */
  400: unknown;
  /**
   * Room not found.
   */
  404: unknown;
};

export type UpdateRoomByIdResponses = {
  /**
   * Room updated successfully.
   */
  200: Room;
};

export type UpdateRoomByIdResponse =
  UpdateRoomByIdResponses[keyof UpdateRoomByIdResponses];

export type GetBookingsForRoomData = {
  body?: never;
  path: {
    /**
     * The unique identifier of the room (UUID v7).
     */
    roomId: string;
  };
  query: {
    /**
     * The date for which bookings are requested in ISO 8601 format (YYYY-MM-DD).
     */
    date: string;
  };
  url: '/rooms/{roomId}/bookings';
};

export type GetBookingsForRoomErrors = {
  /**
   * Requested bookings for a date in the past.
   */
  400: unknown;
  /**
   * Room not found.
   */
  404: unknown;
};

export type GetBookingsForRoomResponses = {
  /**
   * Success. Returns a list of bookings for the specified room on the specified date.
   */
  200: GetAllBookingsResponse;
};

export type GetBookingsForRoomResponse =
  GetBookingsForRoomResponses[keyof GetBookingsForRoomResponses];

export type GetAllBookingsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/bookings';
};

export type GetAllBookingsResponses = {
  /**
   * Success. Returns a list of all bookings.
   */
  200: Array<Booking>;
};

export type GetAllBookingsResponse2 =
  GetAllBookingsResponses[keyof GetAllBookingsResponses];

export type BookRoomData = {
  body: RoomBookingRequest;
  path?: never;
  query?: never;
  url: '/bookings';
};

export type BookRoomErrors = {
  /**
   * A problem detail object that provides information about an error that occurred.
   *
   */
  400: {
    /**
     * A short, human-readable summary of the problem.
     */
    title?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status?: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
  };
  /**
   * Room not found.
   */
  404: unknown;
  /**
   * Booking conflicts with existing bookings.
   */
  409: unknown;
};

export type BookRoomError = BookRoomErrors[keyof BookRoomErrors];

export type BookRoomResponses = {
  /**
   * Booking created successfully.
   */
  201: Booking;
};

export type BookRoomResponse = BookRoomResponses[keyof BookRoomResponses];

export type CancelBookingByIdData = {
  body?: never;
  path: {
    /**
     * The unique identifier of the booking (UUID v7).
     */
    bookingId: string;
  };
  query?: never;
  url: '/bookings/{bookingId}';
};

export type CancelBookingByIdErrors = {
  /**
   * Booking not found.
   */
  404: unknown;
};

export type CancelBookingByIdResponses = {
  /**
   * Booking cancelled successfully.
   */
  204: void;
};

export type CancelBookingByIdResponse =
  CancelBookingByIdResponses[keyof CancelBookingByIdResponses];

export type GetBookingByIdData = {
  body?: never;
  path: {
    /**
     * The unique identifier of the booking (UUID v7).
     */
    bookingId: string;
  };
  query?: never;
  url: '/bookings/{bookingId}';
};

export type GetBookingByIdErrors = {
  /**
   * Booking not found.
   */
  404: unknown;
};

export type GetBookingByIdResponses = {
  /**
   * Success. Returns the details of the specified booking.
   */
  200: Booking;
};

export type GetBookingByIdResponse =
  GetBookingByIdResponses[keyof GetBookingByIdResponses];

export type ClientOptions = {
  baseUrl: 'https://api.provadis.com/v1' | (string & {});
};
