// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
  GetBuildingsData,
  GetBuildingsResponses,
  CreateBuildingData,
  CreateBuildingResponses,
  CreateBuildingErrors,
  DeleteBuildingData,
  DeleteBuildingResponses,
  DeleteBuildingErrors,
  GetBuildingByIdData,
  GetBuildingByIdResponses,
  GetBuildingByIdErrors,
  UpdateBuildingData,
  UpdateBuildingResponses,
  UpdateBuildingErrors,
  GetRoomsForBuildingData,
  GetRoomsForBuildingResponses,
  GetRoomsForBuildingErrors,
  GetBookingsForBuildingData,
  GetBookingsForBuildingResponses,
  GetBookingsForBuildingErrors,
  GetRoomsData,
  GetRoomsResponses,
  CreateRoomData,
  CreateRoomResponses,
  CreateRoomErrors,
  FindAvailableRoomsData,
  FindAvailableRoomsResponses,
  FindAvailableRoomsErrors,
  DeleteRoomByIdData,
  DeleteRoomByIdResponses,
  DeleteRoomByIdErrors,
  GetRoomByIdData,
  GetRoomByIdResponses,
  GetRoomByIdErrors,
  UpdateRoomByIdData,
  UpdateRoomByIdResponses,
  UpdateRoomByIdErrors,
  GetBookingsForRoomData,
  GetBookingsForRoomResponses,
  GetBookingsForRoomErrors,
  GetAllBookingsData,
  GetAllBookingsResponses,
  BookRoomData,
  BookRoomResponses,
  BookRoomErrors,
  CancelBookingByIdData,
  CancelBookingByIdResponses,
  CancelBookingByIdErrors,
  GetBookingByIdData,
  GetBookingByIdResponses,
  GetBookingByIdErrors,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all buildings for the Provadis complex
 */
export const getBuildings = <ThrowOnError extends boolean = false>(
  options?: Options<GetBuildingsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetBuildingsResponses,
    unknown,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/buildings',
    ...options,
  });
};

/**
 * Create a new building in the Provadis complex
 */
export const createBuilding = <ThrowOnError extends boolean = false>(
  options: Options<CreateBuildingData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateBuildingResponses,
    CreateBuildingErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/buildings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete building by ID.
 */
export const deleteBuilding = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBuildingData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteBuildingResponses,
    DeleteBuildingErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/buildings/{buildingId}',
    ...options,
  });
};

/**
 * Get building by ID
 */
export const getBuildingById = <ThrowOnError extends boolean = false>(
  options: Options<GetBuildingByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBuildingByIdResponses,
    GetBuildingByIdErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/buildings/{buildingId}',
    ...options,
  });
};

/**
 * Updates an existing building by its ID.
 */
export const updateBuilding = <ThrowOnError extends boolean = false>(
  options: Options<UpdateBuildingData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateBuildingResponses,
    UpdateBuildingErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/buildings/{buildingId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all rooms in a building
 */
export const getRoomsForBuilding = <ThrowOnError extends boolean = false>(
  options: Options<GetRoomsForBuildingData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRoomsForBuildingResponses,
    GetRoomsForBuildingErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/buildings/{buildingId}/rooms',
    ...options,
  });
};

/**
 * Get all bookings for a building on a specific date
 */
export const getBookingsForBuilding = <ThrowOnError extends boolean = false>(
  options: Options<GetBookingsForBuildingData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBookingsForBuildingResponses,
    GetBookingsForBuildingErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/buildings/{buildingId}/bookings',
    ...options,
  });
};

/**
 * Get all known rooms
 */
export const getRooms = <ThrowOnError extends boolean = false>(
  options?: Options<GetRoomsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRoomsResponses,
    unknown,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/rooms',
    ...options,
  });
};

/**
 * Create a new room
 */
export const createRoom = <ThrowOnError extends boolean = false>(
  options: Options<CreateRoomData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateRoomResponses,
    CreateRoomErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/rooms',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Find all rooms that are available for a booking
 * Returns all rooms that are available for a booking based on the provided information.
 *
 */
export const findAvailableRooms = <ThrowOnError extends boolean = false>(
  options: Options<FindAvailableRoomsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    FindAvailableRoomsResponses,
    FindAvailableRoomsErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/rooms/inquiry',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a specific room by ID
 * Deletes a specific room identified by its UUID v7.
 */
export const deleteRoomById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRoomByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteRoomByIdResponses,
    DeleteRoomByIdErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/rooms/{roomId}',
    ...options,
  });
};

/**
 * Get a specific room by ID
 * Returns details of a specific room identified by its UUID v7.
 */
export const getRoomById = <ThrowOnError extends boolean = false>(
  options: Options<GetRoomByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRoomByIdResponses,
    GetRoomByIdErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/rooms/{roomId}',
    ...options,
  });
};

/**
 * Update a specific room by ID
 * Updates the details of a specific room identified by its UUID v7.
 */
export const updateRoomById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRoomByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateRoomByIdResponses,
    UpdateRoomByIdErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/rooms/{roomId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all bookings for a specific room on a specific date
 * Returns all bookings for a specific room on a specific date.
 */
export const getBookingsForRoom = <ThrowOnError extends boolean = false>(
  options: Options<GetBookingsForRoomData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBookingsForRoomResponses,
    GetBookingsForRoomErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/rooms/{roomId}/bookings',
    ...options,
  });
};

/**
 * Get all bookings
 * Returns all bookings across all rooms.
 */
export const getAllBookings = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllBookingsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllBookingsResponses,
    unknown,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/bookings',
    ...options,
  });
};

/**
 * Try to book a room
 * Attempts to book a room based on the provided booking details.
 */
export const bookRoom = <ThrowOnError extends boolean = false>(
  options: Options<BookRoomData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    BookRoomResponses,
    BookRoomErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/bookings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Cancel a specific booking by ID
 * Cancels a specific booking identified by its UUID v7.
 */
export const cancelBookingById = <ThrowOnError extends boolean = false>(
  options: Options<CancelBookingByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    CancelBookingByIdResponses,
    CancelBookingByIdErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/bookings/{bookingId}',
    ...options,
  });
};

/**
 * Get a specific booking by ID
 * Returns details of a specific booking identified by its UUID v7.
 */
export const getBookingById = <ThrowOnError extends boolean = false>(
  options: Options<GetBookingByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBookingByIdResponses,
    GetBookingByIdErrors,
    ThrowOnError,
    'data'
  >({
    responseStyle: 'data',
    url: '/bookings/{bookingId}',
    ...options,
  });
};
