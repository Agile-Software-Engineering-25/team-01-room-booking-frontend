// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getBuildings,
  createBuilding,
  deleteBuilding,
  getBuildingById,
  updateBuilding,
  getRoomsForBuilding,
  getBookingsForBuilding,
  getRooms,
  createRoom,
  findAvailableRooms,
  deleteRoomById,
  getRoomById,
  updateRoomById,
  getBookingsForRoom,
  getAllBookings,
  bookRoom,
  cancelBookingById,
  getBookingById,
} from '../sdk.gen';
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from '@tanstack/react-query';
import type {
  GetBuildingsData,
  CreateBuildingData,
  CreateBuildingResponse,
  DeleteBuildingData,
  DeleteBuildingResponse,
  GetBuildingByIdData,
  UpdateBuildingData,
  UpdateBuildingResponse,
  GetRoomsForBuildingData,
  GetBookingsForBuildingData,
  GetRoomsData,
  CreateRoomData,
  CreateRoomResponse,
  FindAvailableRoomsData,
  FindAvailableRoomsResponse,
  DeleteRoomByIdData,
  DeleteRoomByIdResponse,
  GetRoomByIdData,
  UpdateRoomByIdData,
  UpdateRoomByIdResponse,
  GetBookingsForRoomData,
  GetAllBookingsData,
  BookRoomData,
  BookRoomError,
  BookRoomResponse,
  CancelBookingByIdData,
  CancelBookingByIdResponse,
  GetBookingByIdData,
} from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getBuildingsQueryKey = (options?: Options<GetBuildingsData>) =>
  createQueryKey('getBuildings', options);

/**
 * Get all buildings for the Provadis complex
 */
export const getBuildingsOptions = (options?: Options<GetBuildingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getBuildings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getBuildingsQueryKey(options),
  });
};

export const createBuildingQueryKey = (options: Options<CreateBuildingData>) =>
  createQueryKey('createBuilding', options);

/**
 * Create a new building in the Provadis complex
 */
export const createBuildingOptions = (options: Options<CreateBuildingData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await createBuilding({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: createBuildingQueryKey(options),
  });
};

/**
 * Create a new building in the Provadis complex
 */
export const createBuildingMutation = (
  options?: Partial<Options<CreateBuildingData>>
): UseMutationOptions<
  CreateBuildingResponse,
  DefaultError,
  Options<CreateBuildingData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateBuildingResponse,
    DefaultError,
    Options<CreateBuildingData>
  > = {
    mutationFn: async (localOptions) => {
      return await createBuilding({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

/**
 * Delete building by ID.
 */
export const deleteBuildingMutation = (
  options?: Partial<Options<DeleteBuildingData>>
): UseMutationOptions<
  DeleteBuildingResponse,
  DefaultError,
  Options<DeleteBuildingData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteBuildingResponse,
    DefaultError,
    Options<DeleteBuildingData>
  > = {
    mutationFn: async (localOptions) => {
      return await deleteBuilding({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getBuildingByIdQueryKey = (
  options: Options<GetBuildingByIdData>
) => createQueryKey('getBuildingById', options);

/**
 * Get building by ID
 */
export const getBuildingByIdOptions = (
  options: Options<GetBuildingByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getBuildingById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getBuildingByIdQueryKey(options),
  });
};

/**
 * Updates an existing building by its ID.
 */
export const updateBuildingMutation = (
  options?: Partial<Options<UpdateBuildingData>>
): UseMutationOptions<
  UpdateBuildingResponse,
  DefaultError,
  Options<UpdateBuildingData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateBuildingResponse,
    DefaultError,
    Options<UpdateBuildingData>
  > = {
    mutationFn: async (localOptions) => {
      return await updateBuilding({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getRoomsForBuildingQueryKey = (
  options: Options<GetRoomsForBuildingData>
) => createQueryKey('getRoomsForBuilding', options);

/**
 * Get all rooms in a building
 */
export const getRoomsForBuildingOptions = (
  options: Options<GetRoomsForBuildingData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getRoomsForBuilding({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getRoomsForBuildingQueryKey(options),
  });
};

export const getBookingsForBuildingQueryKey = (
  options: Options<GetBookingsForBuildingData>
) => createQueryKey('getBookingsForBuilding', options);

/**
 * Get all bookings for a building on a specific date
 */
export const getBookingsForBuildingOptions = (
  options: Options<GetBookingsForBuildingData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getBookingsForBuilding({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getBookingsForBuildingQueryKey(options),
  });
};

export const getRoomsQueryKey = (options?: Options<GetRoomsData>) =>
  createQueryKey('getRooms', options);

/**
 * Get all known rooms
 */
export const getRoomsOptions = (options?: Options<GetRoomsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getRooms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getRoomsQueryKey(options),
  });
};

export const createRoomQueryKey = (options: Options<CreateRoomData>) =>
  createQueryKey('createRoom', options);

/**
 * Create a new room
 */
export const createRoomOptions = (options: Options<CreateRoomData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await createRoom({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: createRoomQueryKey(options),
  });
};

/**
 * Create a new room
 */
export const createRoomMutation = (
  options?: Partial<Options<CreateRoomData>>
): UseMutationOptions<
  CreateRoomResponse,
  DefaultError,
  Options<CreateRoomData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateRoomResponse,
    DefaultError,
    Options<CreateRoomData>
  > = {
    mutationFn: async (localOptions) => {
      return await createRoom({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const findAvailableRoomsQueryKey = (
  options: Options<FindAvailableRoomsData>
) => createQueryKey('findAvailableRooms', options);

/**
 * Find all rooms that are available for a booking
 * Returns all rooms that are available for a booking based on the provided information.
 *
 */
export const findAvailableRoomsOptions = (
  options: Options<FindAvailableRoomsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await findAvailableRooms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: findAvailableRoomsQueryKey(options),
  });
};

/**
 * Find all rooms that are available for a booking
 * Returns all rooms that are available for a booking based on the provided information.
 *
 */
export const findAvailableRoomsMutation = (
  options?: Partial<Options<FindAvailableRoomsData>>
): UseMutationOptions<
  FindAvailableRoomsResponse,
  DefaultError,
  Options<FindAvailableRoomsData>
> => {
  const mutationOptions: UseMutationOptions<
    FindAvailableRoomsResponse,
    DefaultError,
    Options<FindAvailableRoomsData>
  > = {
    mutationFn: async (localOptions) => {
      return await findAvailableRooms({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

/**
 * Delete a specific room by ID
 * Deletes a specific room identified by its UUID v7.
 */
export const deleteRoomByIdMutation = (
  options?: Partial<Options<DeleteRoomByIdData>>
): UseMutationOptions<
  DeleteRoomByIdResponse,
  DefaultError,
  Options<DeleteRoomByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteRoomByIdResponse,
    DefaultError,
    Options<DeleteRoomByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await deleteRoomById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getRoomByIdQueryKey = (options: Options<GetRoomByIdData>) =>
  createQueryKey('getRoomById', options);

/**
 * Get a specific room by ID
 * Returns details of a specific room identified by its UUID v7.
 */
export const getRoomByIdOptions = (options: Options<GetRoomByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getRoomById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getRoomByIdQueryKey(options),
  });
};

/**
 * Update a specific room by ID
 * Updates the details of a specific room identified by its UUID v7.
 */
export const updateRoomByIdMutation = (
  options?: Partial<Options<UpdateRoomByIdData>>
): UseMutationOptions<
  UpdateRoomByIdResponse,
  DefaultError,
  Options<UpdateRoomByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateRoomByIdResponse,
    DefaultError,
    Options<UpdateRoomByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await updateRoomById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getBookingsForRoomQueryKey = (
  options: Options<GetBookingsForRoomData>
) => createQueryKey('getBookingsForRoom', options);

/**
 * Get all bookings for a specific room on a specific date
 * Returns all bookings for a specific room on a specific date.
 */
export const getBookingsForRoomOptions = (
  options: Options<GetBookingsForRoomData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getBookingsForRoom({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getBookingsForRoomQueryKey(options),
  });
};

export const getAllBookingsQueryKey = (options?: Options<GetAllBookingsData>) =>
  createQueryKey('getAllBookings', options);

/**
 * Get all bookings
 * Returns all bookings across all rooms.
 */
export const getAllBookingsOptions = (
  options?: Options<GetAllBookingsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getAllBookings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getAllBookingsQueryKey(options),
  });
};

export const bookRoomQueryKey = (options: Options<BookRoomData>) =>
  createQueryKey('bookRoom', options);

/**
 * Try to book a room
 * Attempts to book a room based on the provided booking details.
 */
export const bookRoomOptions = (options: Options<BookRoomData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await bookRoom({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: bookRoomQueryKey(options),
  });
};

/**
 * Try to book a room
 * Attempts to book a room based on the provided booking details.
 */
export const bookRoomMutation = (
  options?: Partial<Options<BookRoomData>>
): UseMutationOptions<
  BookRoomResponse,
  BookRoomError,
  Options<BookRoomData>
> => {
  const mutationOptions: UseMutationOptions<
    BookRoomResponse,
    BookRoomError,
    Options<BookRoomData>
  > = {
    mutationFn: async (localOptions) => {
      return await bookRoom({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

/**
 * Cancel a specific booking by ID
 * Cancels a specific booking identified by its UUID v7.
 */
export const cancelBookingByIdMutation = (
  options?: Partial<Options<CancelBookingByIdData>>
): UseMutationOptions<
  CancelBookingByIdResponse,
  DefaultError,
  Options<CancelBookingByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    CancelBookingByIdResponse,
    DefaultError,
    Options<CancelBookingByIdData>
  > = {
    mutationFn: async (localOptions) => {
      return await cancelBookingById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
    },
  };
  return mutationOptions;
};

export const getBookingByIdQueryKey = (options: Options<GetBookingByIdData>) =>
  createQueryKey('getBookingById', options);

/**
 * Get a specific booking by ID
 * Returns details of a specific booking identified by its UUID v7.
 */
export const getBookingByIdOptions = (options: Options<GetBookingByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      return await getBookingById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
    },
    queryKey: getBookingByIdQueryKey(options),
  });
};
